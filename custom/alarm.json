{
  "openapi": "3.0.1",
  "info": {
    "title": "Intouch IoT Telematics APIs",
    "description": "A set of powerful telematics APIs which users can use to get all the data related to their devices such as live location,trails,alarms etc. These telematics APIs are powered by Mappls's own INTOUCH platform. Mappls InTouch easily integrates into existing cloud services via our tracking & telematics APIs. The API & SDK libraries provide powerful, efficient and accurate positioning for the IoT devices on InTouch applications for Android, iOS and the web. You can find out more about Intouch  at [http://about.mappls.com/intouch](https://about.mappls.com/intouch-platform/)",
    "termsOfService": "https://about.mappls.com/about/terms-conditions",
    "contact": {
      "email": "apisupport@mappls.com"
    },
    "license": {
      "name": "Apache 2.0",
      "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
    },
    "version": "2.0.0"
  },
  "externalDocs": {
    "description": "More About Telematics APIs.",
    "url": "https://about.mappls.com/intouch-platform/#Platform-APIs"
  },
  "servers": [
    {
      "url": "https://intouch.mappls.com/iot/api"
    }
  ],
  "tags": [
    {
      "name": "Intouch IoT Apps",
      "description": "Everything about IoT apps powered by Intouch",
      "externalDocs": {
        "description": "Find out more",
        "url": "https://about.mappls.com/intouch-platform/"
      }
    }
  ],
  "paths": {
    "/alarm": {
      "post": {
        "tags": [
          "alarm"
        ],
        "summary": "This API will create an alarm.",
        "description": "Based on the input parameters provided to this POST alarm API, a new alarm will get created for a single or multiple devices",
        "operationId": "createAlarm",
        "requestBody": {
          "description": "Alarm object that needs to be added to the store",
          "content": {
            "application/form-data": {
              "schema": {
                "properties": {
                  "alarmType": {
                    "type": "integer",
                    "example": 26,
                    "description": "Type of alarm to create. Following are the alarm types & their corresponding IDs.<br> IGNITION: 21, OVERSPEED: 22, UNPLUGGED: 23, PANIC: 24, GEOFENCE: 26, STOPPAGE: 27, IDLE: 28, TOWING: 29, GPRS CONNECTIVITY: 126, VEHICLE BATTERY: 129, MILEAGE: 133, GPS CONNECTIVITY: 146, DISTANCE COVERED: 151, INTERNAL BATTERY VOLTAGE:161"
                  },
                  "deviceId": {
                    "type": "array",
                    "items": {
                      "type": "number"
                    },
                    "example": [
                      1009,
                      9090
                    ],
                    "description": "Device IDs of those devices for which the alarm configuration is done."
                  },
                  "type": {
                    "type": "integer",
                    "example": 1,
                    "description": "For Geofence(alarmType = 26), value of type are as follows:<br>2 - entry, 3 - Exit, 1 - Entry & Exit, 4 - long stay in geofence<br>For ignition(alarmType = 21), types values are as follows:<br>1 - Both ON & OFF, 2 - Ignition On, 3 - Ignition Off, 5 - Day's First Ignition ON<br> For mileage(alarmType = 133), value of type are as follows:<br> 0 - Daily, 1 - Monthly<br>For DIstance Covered(alarmType = 151), value of type are as follows:<br> 1 - At Least, 2 - At Most"
                  },
                  "duration": {
                    "type": "integer",
                    "example": 11,
                    "description": "Only required in case of overspeed, stoppage, idle, towing, GPRS connectivity, vehicle battery, GPS connectivity, distance covered, internal battery alarm"
                  },
                  "limit": {
                    "type": "integer",
                    "example": 55,
                    "description": "Only required in case of overspeed, vehicle battery, mileage, distance covered, internal battery alarm"
                  },
                  "geofenceId": {
                    "type": "array",
                    "items": {
                      "type": "number"
                    },
                    "example": [
                      23434,
                      45454
                    ],
                    "description": "Only required when alarmType is 26 (Geofence). You can pass a single geofence ID or multiple geofence IDs separated by comma"
                  },
                  "severity": {
                    "type": "integer",
                    "example": 0,
                    "description": "This basically defines the severity of the alarm. You can pass 0 for normal severity & 1 for high severity."
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Created"
          },
          "203": {
            "description": "Device Not Found"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponse"
                }
              }
            },
            "description": "Bad Request - Invalid ID supplied or invalid data type."
          },
          "401": {
            "description": "Unauthorized Request. Access to API is forbidden."
          },
          "404": {
            "description": "Not Found - URL Not Found"
          }
        }
      },
      "get": {
        "tags": [
          "alarm"
        ],
        "summary": "This API will get all the alarm configurations for a user.",
        "description": "Based on the passed token key, the API will return the list of all alarm configs.",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "example": "23889,89876",
            "description": "This is the alarm's ID, a non-mandatory parameter. If not passed then by default the API will return the list of all alarm configurations in the account. You can pass single value or comma separated alarm IDs for multiple values.",
            "required": false,
            "schema": {
              "type": "string",
              "items": {
                "type": "number"
              }
            }
          },
          {
            "name": "deviceId",
            "in": "query",
            "example": "24567,10018",
            "description": "This is device ID. API will return data based on the configs set for the passed device IDs. You can pass a single device ID or comma seperated multiple device IDs.",
            "required": false,
            "schema": {
              "type": "string",
              "items": {
                "type": "number"
              }
            }
          },
          {
            "name": "alarmType",
            "in": "query",
            "example": "177,90",
            "description": "This is alarm type. API will return data based on the passed alarm types. You can pass a single alarm type or comma seperated multiple alarm types.",
            "required": false,
            "schema": {
              "type": "string",
              "items": {
                "type": "number"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK - successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AlarmConfig"
                }
              }
            }
          },
          "203": {
            "description": "Device Not Found"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponse"
                }
              }
            },
            "description": "Bad Request - Invalid ID supplied or invalid data type."
          },
          "401": {
            "description": "Unauthorized Request. Access to API is forbidden."
          },
          "404": {
            "description": "Not Found - URL Not Found"
          }
        }
      }
    },
    "/alarm/{id}": {
      "post": {
        "tags": [
          "alarm"
        ],
        "summary": "Updates An Alarm Config",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Mandatory field. This is the ID of the alarm config which needs to be updated.",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "description": "Alarm object that needs to be added to the store",
          "content": {
            "application/form-data": {
              "schema": {
                "properties": {
                  "deviceId": {
                    "type": "array",
                    "items": {
                      "type": "number"
                    },
                    "example": [
                      6678,
                      9876
                    ],
                    "description": "ID of the device for which the alarm config has to be updated. If there are multiple devices then you can pass them separated by comma."
                  },
                  "type": {
                    "type": "integer",
                    "example": 1,
                    "description": "For Geofence(alarmType = 26), value of type are as follows:<br>2 - entry, 3 - Exit, 1 - Entry & Exit, 4 - long stay in geofence<br>For ignition(alarmType = 21), types values are as follows:<br>1 - Both ON & OFF, 2 - Ignition On, 3 - Ignition Off, 5 - Day's First Ignition ON<br> For mileage(alarmType = 133), value of type are as follows:<br> 0 - Daily, 1 - Monthly<br>For DIstance Covered(alarmType = 151), value of type are as follows:<br> 1 - At Least, 2 - At Most"
                  },
                  "duration": {
                    "type": "integer",
                    "example": 11,
                    "description": "Only required in case of overspeed, stoppage, idle, towing, GPRS connectivity, vehicle battery, GPS connectivity, distance covered, internal battery alarm"
                  },
                  "limit": {
                    "type": "integer",
                    "example": 55,
                    "description": "Only required in case of overspeed, vehicle battery, mileage, distance covered, internal battery alarm"
                  },
                  "geofenceId": {
                    "type": "array",
                    "items": {
                      "type": "number"
                    },
                    "example": [
                      23434,
                      45454
                    ],
                    "description": "Only required when alarmType is 26 (Geofence). You can pass a single geofence ID or multiple geofence IDs separated by comma"
                  },
                  "severity": {
                    "type": "integer",
                    "example": 0,
                    "description": "This basically defines the severity of the alarm. You can pass 0 for normal severity & 1 for high severity."
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK - successful operation"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponse"
                }
              }
            },
            "description": "Bad Request - Invalid ID supplied or invalid data type."
          },
          "401": {
            "description": "Unauthorized Request. Access to API is forbidden."
          },
          "403": {
            "description": "ID Not Found"
          },
          "404": {
            "description": "URL Not Found"
          }
        }
      },
      "delete": {
        "tags": [
          "alarm"
        ],
        "summary": "Deletes An Alarm Config",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "id of the alarm config which you want to delete",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK - successful operation"
          },
          "204": {
            "description": "No Content Found"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponse"
                }
              }
            },
            "description": "Bad Request - Invalid ID supplied or invalid data type."
          },
          "401": {
            "description": "Unauthorized Request. Access to API is forbidden."
          },
          "404": {
            "description": "URL Not Found"
          }
        }
      }
    },
    "/alarm/alarmLog/": {
      "get": {
        "tags": [
          "alarm"
        ],
        "summary": "Gets The List Of Alarm Config(s)",
        "parameters": [
          {
            "name": "deviceId",
            "in": "query",
            "description": "Not Mandatory field. This is the ID of the device for which the alarm log need to be fetched. You can pass single device ID or multiple device IDs separated by comma",
            "required": false,
            "example": "1909,2545",
            "schema": {
              "type": "string",
              "items": {
                "type": "number"
              }
            }
          },
          {
            "name": "alarmType",
            "in": "query",
            "description": "Not Mandatory field. This is the type of alarm for which the alarm log need to be fetched. You can pass single alarm type or multiple device IDs separated by comma.<br> Type of alarm to create. Following are the alarm types & their corresponding IDs.<br> IGNITION: 21, OVERSPEED: 22, UNPLUGGED: 23, PANIC: 24, GEOFENCE: 26, STOPPAGE: 27, IDLE: 28, TOWING: 29, GPRS CONNECTIVITY: 126, VEHICLE BATTERY: 129, MILEAGE: 133, GPS CONNECTIVITY: 146, DISTANCE COVERED: 151, INTERNAL BATTERY VOLTAGE:161",
            "required": false,
            "example": "21,26",
            "schema": {
              "type": "string",
              "items": {
                "type": "integer"
              }
            }
          },
          {
            "name": "startTime",
            "in": "query",
            "description": "Mandatory field. This is start timestamp in seconds",
            "required": true,
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "endTime",
            "in": "query",
            "description": "Mandatory field. This is end timestamp in seconds",
            "required": true,
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/AlertObject"
                      }
                    }
                  }
                }
              }
            },
            "description": "OK - successful operation"
          },
          "203": {
            "description": "Device Not Found"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponse"
                }
              }
            },
            "description": "Bad Request - Invalid ID supplied or invalid data type."
          },
          "401": {
            "description": "Unauthorized Request. Access to API is forbidden."
          },
          "404": {
            "description": "Not Found - URL Not Found"
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "AlarmConfig": {
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/GetAlarmConfig"
            }
          }
        }
      },
      "GetAlarmConfig": {
        "type": "object",
        "properties": {
          "id": {
            "type": "number",
            "example": 2345598,
            "description": "This is alarm ID"
          },
          "deviceId": {
            "type": "array",
            "items": {
              "type": "number"
            },
            "example": [
              67700,
              8987
            ],
            "description": "Device ID(s) on which the alarm config got created."
          },
          "alarmType": {
            "type": "integer",
            "example": 28,
            "description": "Type of alarm, for eg - ignition, overspeed etc."
          },
          "limit": {
            "type": "integer",
            "example": 28
          },
          "duration": {
            "type": "integer",
            "example": 28,
            "description": "Type of alarm, for eg - ignition, overspeed etc."
          },
          "type": {
            "type": "integer",
            "example": 0,
            "description": "Values depends on the type of alarm configured."
          },
          "creationTime": {
            "type": "number",
            "example": 1567654565,
            "description": "Time at which the alarm got configured."
          },
          "updationTime": {
            "type": "integer",
            "example": 1567654565,
            "description": "Time at which the alarm got updated."
          },
          "geofenceId": {
            "type": "array",
            "items": {
              "type": "number"
            },
            "example": [
              1001,
              2002
            ],
            "description": "If returned alarm type is geofence, then this will return the list of geofences for which alarms were configured."
          },
          "severity": {
            "type": "integer",
            "example": 0
          }
        }
      },
      "AlertObject": {
        "properties": {
          "deviceId": {
            "type": "number",
            "example": 8989,
            "description": "Will come only in case of /alarmLog GET API response"
          },
          "timestamp": {
            "type": "number",
            "example": 1577589789,
            "description": "Time at which the alert got generated"
          },
          "latitude": {
            "type": "number",
            "example": 28.550962381896
          },
          "longitude": {
            "type": "number",
            "example": 77.26890675033
          },
          "address": {
            "type": "string",
            "example": "237, Okhla Industrial Estate Phase 3, New Delhi, Delhi. 19 m from Wipro BPO Corporate Office pin-110020",
            "description": "Location address at which the alarm got generated"
          },
          "alarmType": {
            "type": "integer",
            "example": 28,
            "description": "Type of alarm to create. Following are the alarm types & their corresponding IDs.<br> IGNITION: 21, OVERSPEED: 22, UNPLUGGED: 23, PANIC: 24, GEOFENCE: 26, STOPPAGE: 27, IDLE: 28, TOWING: 29, GPRS CONNECTIVITY: 126, VEHICLE BATTERY: 129, MILEAGE: 133, GPS CONNECTIVITY: 146, DISTANCE COVERED: 151, INTERNAL BATTERY VOLTAGE:161"
          },
          "limit": {
            "type": "integer",
            "example": 44,
            "description": "Alarm limit as set in the config. For example, if an overspeed alarm set on limit of 44 km/hr in the alarm config setting, then this attribute will return 44 km/hr"
          },
          "duration": {
            "type": "integer",
            "example": 20,
            "description": "Alarm duration limit as set in the alarm config section. For example, if duration of overspeed alarm is set as 20 secs, then the alarm will generate when the vehicle overspeeds for a duration of 20 secs"
          },
          "actualLimit": {
            "type": "integer",
            "example": 57,
            "description": "The actual data received from the device at that particular moment when the alarm got generated"
          },
          "actualDuration": {
            "type": "integer",
            "example": 25,
            "description": "Actual duration for which the device breached the alarm config limit"
          },
          "severity": {
            "type": "integer",
            "example": 1,
            "description": "0 - Low Severity. 1 - High Severity"
          },
          "data": {
            "type": "integer",
            "example": 1,
            "description": "Describes the state of the alarm. IGNITION(type = 21), 0: OFF & 1: ON. AC(type=25), 0: OFF, 1: ON. GEOFENCE(type=26), 1: Entry & Exit Geofence 2: Entry Geofence, 3: Leaving Geofence & 4: Long Stay In Geofence"
          },
          "geofenceId": {
            "type": "number",
            "example": 987876,
            "description": "This is the ID of the geofence for which the alarm got generated. This will come only when the 'type' field return 26 i,e geofence."
          }
        }
      },
      "ApiResponse": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "description": "Status Code Name"
          },
          "message": {
            "type": "string",
            "description": "Describes the type of error based on the type of response code."
          },
          "error": {
            "type": "string",
            "description": "describes the type of error"
          }
        }
      }
    },
    "securitySchemes": {
      "bearerToken": {
        "type": "http",
        "scheme": "bearer",
        "bearerFormat": "JWT"
      }
    }
  },
  "security": [
    {
      "bearerToken": []
    }
  ]
}